#!/usr/bin/python
# -*- coding: iso-8859-1 -*-

import Tkinter
from Servo import *
import math
import time
import threading

class controlPanelGUI(Tkinter.Tk):

# CONSTRUCTOR

    def __init__(self,parent):
        Tkinter.Tk.__init__(self,parent)
        self.parent = parent
        self.initializeServo()
        self.initializeGui()


# INITIALIZE METHODS

    def initializeGui(self):
        self.grid()
        self.initializeHand()
        self.initializeupper_arm_()

        #Frame Specifics
        self.grid_columnconfigure(0,weight=1)
        self.resizable(False,False)
        self.update()
        self.geometry('800x400+100+100')    
        self.angleEntryHand.focus_set()
        self.angleEntryHand.selection_range(0, Tkinter.END)

    def initializeServo(self):
        global dyn
        global shoulder_Serv
        global upper_arm_Serv

        dyn = USB2Dynamixel_Device('/dev/tty.usbserial-AH01FOYT', 1000000)
        upper_arm_Serv = Robotis_Servo( dyn, 1)
        shoulder_Serv = Robotis_Servo( dyn, 2)


    def initializeHand(self):
        #Angle Entry Box
        self.angleEntryVariableHand = Tkinter.StringVar()
        self.angleEntryHand = Tkinter.Entry(self,
            textvariable=self.angleEntryVariableHand)
        self.angleEntryHand.grid(column=0,row=0,sticky='EW')
        self.angleEntryHand.bind("<Return>", self.Hand_OnPressEnter_Angle)
        self.angleEntryVariableHand.set(u"Enter Angle Here")

        #Angle Entry Button
        angleEnterButtonHand = Tkinter.Button(self,text=u"Enter",
            command=self.Hand_OnPressButton_Angle)
        angleEnterButtonHand.grid(column=1,row=0)

        #Angle Info Box
        self.angleLabelVariableHand = Tkinter.StringVar()
        angleLabelHand = Tkinter.Label(self,textvariable=self.angleLabelVariableHand,
                              anchor="w",fg="white",bg="blue")
        angleLabelHand.grid(column=0,row=1,columnspan=2,sticky='EW')
        self.angleLabelVariableHand.set(u"Angle: "+str(round(float(math.degrees(shoulder_Serv.read_angle())),2))+" Deg")

        #Load Info Box
        self.loadLabelVariableHand = Tkinter.StringVar()
        loadLabelHand = Tkinter.Label(self,textvariable=self.loadLabelVariableHand,
                              anchor="w",fg="white",bg="red")
        loadLabelHand.grid(column=0,row=2,columnspan=2,sticky='EW')
        self.loadLabelVariableHand.set(u"Load: "+str(int(shoulder_Serv.read_load()))+" Units")

        #Temp Info Box
        self.tempLabelVariableHand = Tkinter.StringVar()
        tempLabelHand = Tkinter.Label(self,textvariable=self.tempLabelVariableHand,
                              anchor="w",fg="white",bg="purple")
        tempLabelHand.grid(column=0,row=3,columnspan=2,sticky='EW')
        self.tempLabelVariableHand.set(u"Temp: "+str(int(shoulder_Serv.read_temperature()))+" Deg")

        #Voltage Info Box
        self.voltLabelVariableHand = Tkinter.StringVar()
        voltLabelHand = Tkinter.Label(self,textvariable=self.voltLabelVariableHand,
                              anchor="w",fg="white",bg="orange")
        voltLabelHand.grid(column=0,row=4,columnspan=2,sticky='EW')
        self.voltLabelVariableHand.set(u"Voltage: "+str(int(shoulder_Serv.read_voltage()))+" V")

        #Proportional Info Box
        self.propLabelVariableHand = Tkinter.StringVar()
        propLabelHand = Tkinter.Label(self,textvariable=self.propLabelVariableHand,
                              anchor="w",fg="white",bg="blue")
        propLabelHand.grid(column=0,row=5,columnspan=2,sticky='EW')
        self.propLabelVariableHand.set(u"Proportional Gain: "+str(int(shoulder_Serv.read_propGain()))+" Units")

        #Derivative Info Box
        self.dervLabelVariableHand = Tkinter.StringVar()
        dervLabelHand = Tkinter.Label(self,textvariable=self.dervLabelVariableHand,
                              anchor="w",fg="white",bg="red")
        dervLabelHand.grid(column=0,row=6,columnspan=2,sticky='EW')
        self.dervLabelVariableHand.set(u"Derivative Gain: "+str(int(shoulder_Serv.read_dervGain()))+" Units")

        #Integral Info Box
        self.integLabelVariableHand = Tkinter.StringVar()
        integLabelHand = Tkinter.Label(self,textvariable=self.integLabelVariableHand,
                              anchor="w",fg="white",bg="purple")
        integLabelHand.grid(column=0,row=7,columnspan=2,sticky='EW')
        self.integLabelVariableHand.set(u"Integral Gain: "+str(int(shoulder_Serv.read_intGain()))+" Units")

        #Speed Entry Box
        self.speedEntryVariableHand = Tkinter.StringVar()
        self.speedEntryHand = Tkinter.Entry(self,
            textvariable=self.speedEntryVariableHand)
        self.speedEntryHand.grid(column=0,row=8,sticky='EW')
        self.speedEntryHand.bind("<Return>", self.Hand_OnPressEnter_Speed)
        self.speedEntryVariableHand.set(u"Enter Speed (rpm)")

        #Speed Entry Button
        speedEnterButtonHand = Tkinter.Button(self,text=u"Enter",
            command=self.Hand_OnPressButton_Speed)
        speedEnterButtonHand.grid(column=1,row=8)

        #Speed Info Box
        self.speedLabelVariableHand = Tkinter.StringVar()
        speedLabelHand = Tkinter.Label(self,textvariable=self.speedLabelVariableHand,
                              anchor="w",fg="white",bg="blue")
        speedLabelHand.grid(column=0,row=9,columnspan=2,sticky='EW')
        self.speedLabelVariableHand.set(u"Speed: " + self.speedLabelVariableHand.get())

    def initializeupper_arm_(self):
        #Angle Entry Box
        self.angleEntryVariableupper_arm_ = Tkinter.StringVar()
        self.angleEntryupper_arm_ = Tkinter.Entry(self,
            textvariable=self.angleEntryVariableupper_arm_)
        self.angleEntryupper_arm_.grid(column=3,row=0,sticky='EW')
        self.angleEntryupper_arm_.bind("<Return>", self.upper_arm__OnPressEnter_Angle)
        self.angleEntryVariableupper_arm_.set(u"Enter Angle Here")

        #Angle Entry Button
        angleEnterButtonupper_arm_ = Tkinter.Button(self,text=u"Enter",
            command=self.upper_arm__OnPressButton_Angle)
        angleEnterButtonupper_arm_.grid(column=4,row=0)

        #Angle Info Box
        self.angleLabelVariableupper_arm_ = Tkinter.StringVar()
        angleLabelupper_arm_ = Tkinter.Label(self,textvariable=self.angleLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="blue")
        angleLabelupper_arm_.grid(column=3,row=1,columnspan=2,sticky='EW')
        self.angleLabelVariableupper_arm_.set(u"Angle: "+str(round(float(math.degrees(upper_arm_Serv.read_angle())),2))+" Deg")

        #Load Info Box
        self.loadLabelVariableupper_arm_ = Tkinter.StringVar()
        loadLabelupper_arm_ = Tkinter.Label(self,textvariable=self.loadLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="red")
        loadLabelupper_arm_.grid(column=3,row=2,columnspan=2,sticky='EW')
        self.loadLabelVariableupper_arm_.set(u"Load: "+str(int(upper_arm_Serv.read_load()))+" Units")

        #Temp Info Box
        self.tempLabelVariableupper_arm_ = Tkinter.StringVar()
        tempLabelupper_arm_ = Tkinter.Label(self,textvariable=self.tempLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="purple")
        tempLabelupper_arm_.grid(column=3,row=3,columnspan=2,sticky='EW')
        self.tempLabelVariableupper_arm_.set(u"Temp: "+str(int(upper_arm_Serv.read_temperature()))+" Deg")

        #Voltage Info Box
        self.voltLabelVariableupper_arm_ = Tkinter.StringVar()
        voltLabelupper_arm_ = Tkinter.Label(self,textvariable=self.voltLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="orange")
        voltLabelupper_arm_.grid(column=3,row=4,columnspan=2,sticky='EW')
        self.voltLabelVariableupper_arm_.set(u"Voltage: "+str(int(upper_arm_Serv.read_voltage()))+" V")

        #Proportional Info Box
        self.propLabelVariableupper_arm_ = Tkinter.StringVar()
        propLabelupper_arm_ = Tkinter.Label(self,textvariable=self.propLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="blue")
        propLabelupper_arm_.grid(column=3,row=5,columnspan=2,sticky='EW')
        self.propLabelVariableupper_arm_.set(u"Proportional Gain: "+str(int(upper_arm_Serv.read_propGain()))+" Units")

        #Derivative Info Box
        self.dervLabelVariableupper_arm_ = Tkinter.StringVar()
        dervLabelupper_arm_ = Tkinter.Label(self,textvariable=self.dervLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="red")
        dervLabelupper_arm_.grid(column=3,row=6,columnspan=2,sticky='EW')
        self.dervLabelVariableupper_arm_.set(u"Derivative Gain: "+str(int(upper_arm_Serv.read_dervGain()))+" Units")

        #Integral Info Box
        self.integLabelVariableupper_arm_ = Tkinter.StringVar()
        integLabelupper_arm_ = Tkinter.Label(self,textvariable=self.integLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="purple")
        integLabelupper_arm_.grid(column=3,row=7,columnspan=2,sticky='EW')
        self.integLabelVariableupper_arm_.set(u"Integral Gain: "+str(int(upper_arm_Serv.read_intGain()))+" Units")

        #Speed Entry Box
        self.speedEntryVariableupper_arm_ = Tkinter.StringVar()
        self.speedEntryupper_arm_ = Tkinter.Entry(self,
            textvariable=self.speedEntryVariableupper_arm_)
        self.speedEntryupper_arm_.grid(column=0,row=8,sticky='EW')
        self.speedEntryupper_arm_.bind("<Return>", self.upper_arm__OnPressEnter_Speed)
        self.speedEntryVariableupper_arm_.set(u"Enter Speed (rpm)")

        #Speed Entry Button
        speedEnterButtonupper_arm_ = Tkinter.Button(self,text=u"Enter",
            command=self.upper_arm__OnPressButton_Speed)
        speedEnterButtonupper_arm_.grid(column=1,row=8)

        #Speed Info Box
        self.speedLabelVariableupper_arm_ = Tkinter.StringVar()
        speedLabelupper_arm_ = Tkinter.Label(self,textvariable=self.speedLabelVariableupper_arm_,
                              anchor="w",fg="white",bg="blue")
        speedLabelupper_arm_.grid(column=0,row=9,columnspan=2,sticky='EW')
        self.speedLabelVariableupper_arm_.set(u"Speed: " + self.speedLabelVariableupper_arm_.get())


# HAND METHODS

    def Hand_OnPressButton_Angle(self):
        shoulder_Serv.move_angle(math.radians(float(self.angleEntryVariableHand.get())))
        self.UpdateValsHand()
        self.angleEntryHand.focus_set()
        self.angleEntryHand.selection_range(0, Tkinter.END)

    def Hand_OnPressEnter_Angle(self, event):
        self.Hand_OnPressButton_Angle()

    def Hand_OnPressButton_Speed(self):
        upper_arm_Serv.set_angvel( float(self.speedEntryVariableHand.get()) * (2 * math.pi) / 60.0 )
        self.UpdateValsHand()
        self.speedEntryHand.focus_set()
        self.speedEntryHand.selection_range(0, Tkinter.END)

    def Hand_OnPressEnter_Speed(self, event):
        self.Hand_OnPressButton_Speed()

    def UpdateValsHand(self):
        self.angleLabelVariableHand.set(u"Angle: "+str(round(float(math.degrees(shoulder_Serv.read_angle())),2))+" Deg")
        self.loadLabelVariableHand.set(u"Load: "+str(int(shoulder_Serv.read_load()))+" Units")
        self.tempLabelVariableHand.set(u"Temp: "+str(int(shoulder_Serv.read_temperature()))+" Deg")
        self.voltLabelVariableHand.set(u"Voltage: "+str(int(shoulder_Serv.read_voltage()))+" V")


# upper_arm_ METHODS

    def upper_arm__OnPressButton_Angle(self):
        upper_arm_Serv.move_angle(math.radians(float(self.angleEntryVariableupper_arm_.get())))
        self.UpdateValsupper_arm_()
        self.angleEntryupper_arm_.focus_set()
        self.angleEntryupper_arm_.selection_range(0, Tkinter.END)

    def upper_arm__OnPressEnter_Angle(self, event):
        self.upper_arm__OnPressButton_Angle()

    def upper_arm__OnPressButton_Speed(self):
        upper_arm_Serv.set_angvel( float(self.speedEntryVariableupper_arm_.get()) * (2 * math.pi) / 60.0 )
        self.UpdateValsupper_arm_()
        self.speedEntryupper_arm_.focus_set()
        self.speedEntryupper_arm_.selection_range(0, Tkinter.END)

    def upper_arm__OnPressEnter_Speed(self, event):
        self.upper_arm__OnPressButton_Speed()

    def UpdateValsupper_arm_(self):
        self.angleLabelVariableupper_arm_.set(u"Angle: "+str(round(float(math.degrees(upper_arm_Serv.read_angle())),2))+" Deg")
        self.loadLabelVariableupper_arm_.set(u"Load: "+str(int(upper_arm_Serv.read_load()))+" Units")
        self.tempLabelVariableupper_arm_.set(u"Temp: "+str(int(upper_arm_Serv.read_temperature()))+" Deg")
        self.voltLabelVariableupper_arm_.set(u"Voltage: "+str(int(upper_arm_Serv.read_voltage()))+" V")





if __name__ == "__main__":
    global gui
    gui = controlPanelGUI(None)
    gui.title('Servo Control')

    gui.mainloop()
